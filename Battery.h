// Generated by gencpp from file status_gui/Battery.msg
// DO NOT EDIT!


#ifndef STATUS_GUI_MESSAGE_BATTERY_H
#define STATUS_GUI_MESSAGE_BATTERY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace status_gui
{
template <class ContainerAllocator>
struct Battery_
{
  typedef Battery_<ContainerAllocator> Type;

  Battery_()
    : header()
    , voltage(0.0)
    , current(0.0)
    , charge(0.0)
    , capacity(0.0)
    , design_capacity(0.0)
    , percentage(0.0)
    , power_supply_status(0)
    , power_supply_health(0)
    , power_supply_technology(0)
    , present(false)
    , cell_voltage()
    , location()
    , serial_number()  {
    }
  Battery_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , voltage(0.0)
    , current(0.0)
    , charge(0.0)
    , capacity(0.0)
    , design_capacity(0.0)
    , percentage(0.0)
    , power_supply_status(0)
    , power_supply_health(0)
    , power_supply_technology(0)
    , present(false)
    , cell_voltage(_alloc)
    , location(_alloc)
    , serial_number(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _current_type;
  _current_type current;

   typedef float _charge_type;
  _charge_type charge;

   typedef float _capacity_type;
  _capacity_type capacity;

   typedef float _design_capacity_type;
  _design_capacity_type design_capacity;

   typedef float _percentage_type;
  _percentage_type percentage;

   typedef uint8_t _power_supply_status_type;
  _power_supply_status_type power_supply_status;

   typedef uint8_t _power_supply_health_type;
  _power_supply_health_type power_supply_health;

   typedef uint8_t _power_supply_technology_type;
  _power_supply_technology_type power_supply_technology;

   typedef uint8_t _present_type;
  _present_type present;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cell_voltage_type;
  _cell_voltage_type cell_voltage;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _location_type;
  _location_type location;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _serial_number_type;
  _serial_number_type serial_number;


    enum { POWER_SUPPLY_STATUS_UNKNOWN = 0u };
     enum { POWER_SUPPLY_STATUS_CHARGING = 1u };
     enum { POWER_SUPPLY_STATUS_DISCHARGING = 2u };
     enum { POWER_SUPPLY_STATUS_NOT_CHARGING = 3u };
     enum { POWER_SUPPLY_STATUS_FULL = 4u };
     enum { POWER_SUPPLY_HEALTH_UNKNOWN = 0u };
     enum { POWER_SUPPLY_HEALTH_GOOD = 1u };
     enum { POWER_SUPPLY_HEALTH_OVERHEAT = 2u };
     enum { POWER_SUPPLY_HEALTH_DEAD = 3u };
     enum { POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4u };
     enum { POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5u };
     enum { POWER_SUPPLY_HEALTH_COLD = 6u };
     enum { POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7u };
     enum { POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = 8u };
     enum { POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0u };
     enum { POWER_SUPPLY_TECHNOLOGY_NIMH = 1u };
     enum { POWER_SUPPLY_TECHNOLOGY_LION = 2u };
     enum { POWER_SUPPLY_TECHNOLOGY_LIPO = 3u };
     enum { POWER_SUPPLY_TECHNOLOGY_LIFE = 4u };
     enum { POWER_SUPPLY_TECHNOLOGY_NICD = 5u };
     enum { POWER_SUPPLY_TECHNOLOGY_LIMN = 6u };
 

  typedef boost::shared_ptr< ::status_gui::Battery_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::status_gui::Battery_<ContainerAllocator> const> ConstPtr;

}; // struct Battery_

typedef ::status_gui::Battery_<std::allocator<void> > Battery;

typedef boost::shared_ptr< ::status_gui::Battery > BatteryPtr;
typedef boost::shared_ptr< ::status_gui::Battery const> BatteryConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::status_gui::Battery_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::status_gui::Battery_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace status_gui

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'status_gui': ['/home/jundan/catkin_ws/src/status_gui/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::status_gui::Battery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::status_gui::Battery_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::status_gui::Battery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::status_gui::Battery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::status_gui::Battery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::status_gui::Battery_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::status_gui::Battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7954ad465511faeae0bd3c9a3ea9b353";
  }

  static const char* value(const ::status_gui::Battery_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7954ad465511faeaULL;
  static const uint64_t static_value2 = 0xe0bd3c9a3ea9b353ULL;
};

template<class ContainerAllocator>
struct DataType< ::status_gui::Battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "status_gui/Battery";
  }

  static const char* value(const ::status_gui::Battery_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::status_gui::Battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 POWER_SUPPLY_STATUS_UNKNOWN=0\n\
uint8 POWER_SUPPLY_STATUS_CHARGING=1\n\
uint8 POWER_SUPPLY_STATUS_DISCHARGING=2\n\
uint8 POWER_SUPPLY_STATUS_NOT_CHARGING=3\n\
uint8 POWER_SUPPLY_STATUS_FULL=4\n\
uint8 POWER_SUPPLY_HEALTH_UNKNOWN=0\n\
uint8 POWER_SUPPLY_HEALTH_GOOD=1\n\
uint8 POWER_SUPPLY_HEALTH_OVERHEAT=2\n\
uint8 POWER_SUPPLY_HEALTH_DEAD=3\n\
uint8 POWER_SUPPLY_HEALTH_OVERVOLTAGE=4\n\
uint8 POWER_SUPPLY_HEALTH_UNSPEC_FAILURE=5\n\
uint8 POWER_SUPPLY_HEALTH_COLD=6\n\
uint8 POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE=7\n\
uint8 POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE=8\n\
uint8 POWER_SUPPLY_TECHNOLOGY_UNKNOWN=0\n\
uint8 POWER_SUPPLY_TECHNOLOGY_NIMH=1\n\
uint8 POWER_SUPPLY_TECHNOLOGY_LION=2\n\
uint8 POWER_SUPPLY_TECHNOLOGY_LIPO=3\n\
uint8 POWER_SUPPLY_TECHNOLOGY_LIFE=4\n\
uint8 POWER_SUPPLY_TECHNOLOGY_NICD=5\n\
uint8 POWER_SUPPLY_TECHNOLOGY_LIMN=6\n\
std_msgs/Header header\n\
float32 voltage\n\
float32 current\n\
float32 charge\n\
float32 capacity\n\
float32 design_capacity\n\
float32 percentage\n\
uint8 power_supply_status\n\
uint8 power_supply_health\n\
uint8 power_supply_technology\n\
bool present\n\
float32[] cell_voltage\n\
string location\n\
string serial_number\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::status_gui::Battery_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::status_gui::Battery_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.voltage);
      stream.next(m.current);
      stream.next(m.charge);
      stream.next(m.capacity);
      stream.next(m.design_capacity);
      stream.next(m.percentage);
      stream.next(m.power_supply_status);
      stream.next(m.power_supply_health);
      stream.next(m.power_supply_technology);
      stream.next(m.present);
      stream.next(m.cell_voltage);
      stream.next(m.location);
      stream.next(m.serial_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Battery_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::status_gui::Battery_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::status_gui::Battery_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "charge: ";
    Printer<float>::stream(s, indent + "  ", v.charge);
    s << indent << "capacity: ";
    Printer<float>::stream(s, indent + "  ", v.capacity);
    s << indent << "design_capacity: ";
    Printer<float>::stream(s, indent + "  ", v.design_capacity);
    s << indent << "percentage: ";
    Printer<float>::stream(s, indent + "  ", v.percentage);
    s << indent << "power_supply_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power_supply_status);
    s << indent << "power_supply_health: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power_supply_health);
    s << indent << "power_supply_technology: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power_supply_technology);
    s << indent << "present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.present);
    s << indent << "cell_voltage[]" << std::endl;
    for (size_t i = 0; i < v.cell_voltage.size(); ++i)
    {
      s << indent << "  cell_voltage[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cell_voltage[i]);
    }
    s << indent << "location: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.location);
    s << indent << "serial_number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.serial_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATUS_GUI_MESSAGE_BATTERY_H
